from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import os
# import asyncio
# import aioschedule
import sqlite3 as sl
import work_with_db
import draw
import datetime

con = sl.connect('db//connection.db')

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher(bot)

'''–ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨'''
num = 0
# –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å
start_button = InlineKeyboardMarkup().add(InlineKeyboardButton('üöÄ –ù–∞—á–∞—Ç—å', callback_data='run'))

# –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
go_to_menu = InlineKeyboardMarkup().add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

# –ª–∏—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
list_main_btn = [InlineKeyboardButton('üìÖ –ú–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ', callback_data='my_feeling'),
                 InlineKeyboardButton('üôã‚Äç‚ôÄÔ∏è–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É', callback_data='need_help'),
                 InlineKeyboardButton('‚öôÔ∏è –ö–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞', callback_data='psycho'),
                 InlineKeyboardButton('‚öôÔ∏è –ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='admin')]

# admin kb
admin_kb = InlineKeyboardMarkup(row_width=1)
admin_kb.add(InlineKeyboardButton('‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤ –∫–æ–º–∞–Ω–¥—É', callback_data='add'))
admin_kb.add(InlineKeyboardButton('‚öôÔ∏è –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data='alll'))
admin_kb.add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

# psychologist kb
psycho_kb = InlineKeyboardMarkup(row_width=1)
psycho_kb.add(InlineKeyboardButton('‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data='slot'))
psycho_kb.add(InlineKeyboardButton('‚öôÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç', callback_data='del_slot'))

# TODO: –ø–æ–¥–ø–∏—Å–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
# TODO: —Å–º–∞–π–ª–∏–∫ —Å—Ä–µ–¥–Ω–∏–π –ø–æ–º–µ–Ω—è—Ç—å, –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è, —Ä–µ–≤–µ—Ä—Å –≥—Ä–∞—Ñ–∏–∫–æ–≤, —É–±—Ä–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
all_user_problems = InlineKeyboardMarkup()
all_user_problems.add(InlineKeyboardButton('üë© –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤', callback_data='all_psy0'))
all_user_problems.add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

# –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö: –Ω–∞–∂–∞—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
list_prob_btn = [InlineKeyboardButton('–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ', callback_data='btn1'),
                 InlineKeyboardButton('–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è', callback_data='btn2'),
                 InlineKeyboardButton('–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', callback_data='btn3'),
                 InlineKeyboardButton('–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', callback_data='btn4'),
                 InlineKeyboardButton('–û—Å—É–∂–¥–µ–Ω–∏–µ —Å–µ–±—è', callback_data='btn5'),
                 InlineKeyboardButton('‚úÖ –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ', callback_data='btn6'),
                 InlineKeyboardButton('‚úÖ –ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è', callback_data='btn7'),
                 InlineKeyboardButton('‚úÖ –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', callback_data='btn8'),
                 InlineKeyboardButton('‚úÖ –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', callback_data='btn9'),
                 InlineKeyboardButton('‚úÖ –û—Å—É–∂–¥–µ–Ω–∏–µ —Å–µ–±—è', callback_data='btn10'),
                 InlineKeyboardButton('–î–∞–ª—å—à–µ ‚û°Ô∏è', callback_data='btn11')]

# –ª–∏—Å—Ç —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
# list_inline_btn = [0, 1, 2, 3, 4]
kb_my_prob = InlineKeyboardMarkup()
# for i in list_inline_btn:
#     kb_my_prob.add(list_prob_btn[i])

# —Å—Ç—Ä–æ–∫–∞, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–µ —á–µ–ª–æ–≤–µ–∫–æ–º —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
st_condition = ''

# –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ü–µ–Ω–∫–∏ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
kb_check = InlineKeyboardMarkup().add(InlineKeyboardButton('ü§ó', callback_data='con4'),
                                      InlineKeyboardButton('üòÑ', callback_data='con3'),
                                      InlineKeyboardButton('üòê', callback_data='con2'),
                                      InlineKeyboardButton('‚òπÔ∏è', callback_data='con1'),
                                      InlineKeyboardButton('üò≠', callback_data='con0'),
                                      InlineKeyboardButton('‚õî –°—Ç–æ–ø', callback_data='stop'))

check_up_btn = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('üó∏ –û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
                                                                          callback_data='chk1'),
                                                     InlineKeyboardButton('üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –≥—Ä–∞—Ñ–∏–∫–∏',
                                                                          callback_data='chk2'),
                                                     InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

# –ª–∏—Å—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
list_q = ['–û—Ü–µ–Ω–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è:\nü§ó - —Å–æ–≤—Å–µ–º –Ω–µ –±—ã–ª–æ –ø–æ–≤–æ–¥–∞ –ø–µ—Ä–µ–∂–∏–≤–∞—Ç—å\nüò≠ - —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞—é '
          '–∏–∑-–∑–∞ —á–µ–≥–æ-—Ç–æ',
          '–ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É—à–ª–æ –Ω–∞ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é —Å–µ–≥–æ–¥–Ω—è?\nü§ó - —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞–ª(–∞)\nüò≠ - –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ '
          '–±—ã–ª–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –≤–ø—É—Å—Ç—É—é',
          '–ò—Å–ø—ã—Ç–∞–≤–∞–ª(–∞) –ª–∏ —á—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞?\nü§ó - —Å–æ–≤—Å–µ–º –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–≥–æ —á—É–≤—Å—Ç–≤–∞\nüò≠ - —Å–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∂–∏–≤–∞–ª(–∞) –ø–æ '
          '—ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É',
          '–û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è:\nü§ó - —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) —Å–µ–±—è –Ω–∞ –≤—Å–µ 100% —É–≤–µ—Ä–µ–Ω–Ω–æ\nüò≠ - –æ—â—É—â–∞–ª(–∞) '
          '—Å–µ–±—è –æ—á–µ–Ω—å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ',
          '–û—Ü–µ–Ω–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Å—É–∂–¥–µ–Ω–∏—è —Å–µ–±—è —Å–µ–≥–æ–¥–Ω—è:\nü§ó - —Å–æ–≤—Å–µ–º –Ω–µ –æ—Å—É–∂–¥–∞–ª(–∞) —Å–µ–±—è\nüò≠ - —Å–µ–≥–æ–¥–Ω—è –º–Ω–µ –±—ã–ª–æ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ']


# —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '–ü—Ä–∏–≤–µ—Ç, –º—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, '
                           '–ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ ‚ù§Ô∏è',
                           reply_markup=start_button)


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('run'))
async def start_bot(callback_query: types.CallbackQuery):
    global kb_my_prob, con

    await callback_query.message.delete()
    if work_with_db.if_register(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ‚ù§Ô∏è',
                               reply_markup=go_to_menu)
    else:
        work_with_db.add_new_person(callback_query.from_user.id, '0 1 2 3 4')

        with con:
            list_user_prob = list(con.execute(f"SELECT problems FROM Person WHERE id={callback_query.from_user.id}"))[0][0].split()
            list_user_prob = [int(x) for x in list_user_prob]

        kb_my_prob = InlineKeyboardMarkup()
        for i in list_user_prob:
            kb_my_prob.add(list_prob_btn[i])
        await bot.send_message(callback_query.from_user.id, '–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —Å –∫–∞–∫–∏–º–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Ç—ã '
                                                            '—Å—Ç–∞–ª–∫–∏–≤–∞–µ—à—å—Å—è, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, '
                                                            '–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ —Å–º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å!\n–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ '
                                                            '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è —Ç–µ–±—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.\n'
                                                            'P.S. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ '
                                                            '–Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.', reply_markup=kb_my_prob)


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('menu'))
async def home_page(callback_query: types.CallbackQuery):
    global num, list_main_btn, con
    num = 0
    await callback_query.message.delete()
    main_menu = InlineKeyboardMarkup(row_width=1)
    if str(callback_query.from_user.id) == '596752948':
        main_menu.add(list_main_btn[-1])

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]

    if str(callback_query.from_user.id) in psycho_list:
        main_menu.add(list_main_btn[-2])

    for x in range(len(list_main_btn) - 2):
        main_menu.add(list_main_btn[x])
    await callback_query.message.answer_photo(open("logo.png", "rb"), caption='–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:',
                                              reply_markup=main_menu)


# admin –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('admin'))
async def admin_page(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, '–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_kb)


# admin add psychologist
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('add'))
async def admin_add_psycho(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∏–¥–∞:')
    await bot.send_message(callback_query.from_user.id,
                           'add/<telegram id>/<–§–ò–û>/<–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>/'
                           '<–û –ø—Å–∏–ª–æ–≥–æ–≥–µ>\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤ –±–æ—Ç–∞, –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–∞–º–∞ '
                           '–¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞')
    await bot.send_message(callback_query.from_user.id,
                           '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=go_to_menu)


# admin —Ä–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('alll'))
async def admin_add_psycho(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, '
                                                        '–Ω–∞–ø–∏—à–∏—Ç–µ: all/—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    await bot.send_message(callback_query.from_user.id,
                           '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=go_to_menu)


# psycho –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('psycho'))
async def psycho_page(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, '–ö–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞', reply_markup=psycho_kb)


# psycho add slots
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('slot'))
async def psycho_page(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∏–¥–∞:')
    await bot.send_message(callback_query.from_user.id,
                           'slot/–≥–≥–≥–≥-–º–º-–¥–¥ xx:xx/–≥–≥–≥–≥-–º–º-–¥–¥ xx:xx/–≥–≥–≥–≥-–º–º-–¥–¥ xx:xx –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ')
    await bot.send_message(callback_query.from_user.id,
                           '–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ –æ—à–∏–±–∫–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=go_to_menu)


# –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ —á–µ–∫-–∞–ø
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('my_feeling'))
async def my_feeling(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await callback_query.message.answer_photo(open("check_up.png", "rb"), caption='–î–∞–≤–∞–π –≤—Å–ø–æ–º–Ω–∏–º, –∫–∞–∫ –ø—Ä–æ—à–µ–ª '
                                                                                  '—Ç–≤–æ–π –¥–µ–Ω—å ‚ù§Ô∏è',
                                              reply_markup=check_up_btn)


# –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–±–ª–µ–º –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('need_help'))
async def need_help(callback_query: types.CallbackQuery):
    global con
    await callback_query.message.delete()

    list_problems = list(con.execute(f"SELECT problems FROM Person WHERE id='{callback_query.from_user.id}'"))[0][
        0].split()
    print(list_problems)
    # for problem in list_problems:
    #     if int(problem) == 5:
    #         all_user_problems.add(InlineKeyboardButton('–ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ', callback_data='prob0'))
    #     elif int(problem) == 6:
    #         all_user_problems.add(InlineKeyboardButton('–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è', callback_data='prob1'))
    #     elif int(problem) == 7:
    #         all_user_problems.add(InlineKeyboardButton('–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å', callback_data='prob2'))
    #     elif int(problem) == 8:
    #         all_user_problems.add(InlineKeyboardButton('–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', callback_data='prob3'))
    #     elif int(problem) == 9:
    #         all_user_problems.add(InlineKeyboardButton('–û—Å—É–∂–¥–µ–Ω–∏–µ —Å–µ–±—è', callback_data='prob4'))

    await callback_query.message.answer_photo(open("psy.png", "rb"),
                                              caption='–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å —Ç–µ–±—è —Å'
                                                      '—á–∞—Å—Ç–ª–∏–≤–µ–µ ‚ù§Ô∏è\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–µ—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é '
                                                      '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, '
                                                      '—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å, '
                                                      '–Ω–∞–º–µ—Ç–∏—Ç—å –ø–ª–∞–Ω –¥–æ–ª—å—à–µ–π—à–∏–π –¥–µ–π—Å—Ç–≤–∏–π!\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å '
                                                      '—Ç–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä—ã–π '
                                                      '–±—É–¥–µ—Ç —Ç–µ–±–µ –ø–æ –¥—É—à–µ üòä\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º 60 –º–∏–Ω—É—Ç - '
                                                      '1199 —Ä—É–±–ª–µ–π\n–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å '
                                                      '–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º 90 –º–∏–Ω—É—Ç (–ø–æ –ø–æ–¥–ø–∏—Å–∫–µ) - 1499 —Ä—É–±–ª–µ–π\n–ú—ã –¥–µ–ª–∞–µ–º '
                                                      '–≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç–∏—è '
                                                      '—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏ —Å—Ç–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è —Ç–µ–±—è!\n\n'
                                                      '–í—ã–±–µ—Ä–∏ —Ç—É —Å—Ñ–µ—Ä—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, '
                                                      '—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, '
                                                      '–∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ ‚ù§Ô∏è\n–¢–∞–∫–∂–µ, '
                                                      '—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                                      '"–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤"',
                                              reply_markup=all_user_problems)


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ–∫-–∞–ø–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('stop'))
async def stop_check_up(callback_query: types.CallbackQuery):
    global st_condition
    await callback_query.message.delete()
    st_condition = ''
    await bot.send_message(callback_query.from_user.id,
                           '–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n'
                           '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚ù§', reply_markup=go_to_menu)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def register(callback_query: types.CallbackQuery):
    global list_prob_btn, kb_my_prob, con

    with con:
        list_inline_btn = list(con.execute(f"SELECT problems FROM Person WHERE id={callback_query.from_user.id}"))[0][0].split()
        list_inline_btn = [int(x) for x in list_inline_btn]

    code = callback_query.data[3:]
    if code.isdigit():
        code = int(code)
    if code <= 5:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞ —Ä–∞–Ω—å—à–µ, —Ç–æ –∏–∑–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback_query.message.edit_reply_markup(reply_markup=None)
        kb_my_prob = InlineKeyboardMarkup()
        for pr in range(len(list_inline_btn)):
            if code - 1 == list_inline_btn[pr]:
                list_inline_btn[pr] += 5
            kb_my_prob.add(list_prob_btn[list_inline_btn[pr]])
        if len(list_inline_btn) == 5:
            kb_my_prob.add(list_prob_btn[-1])
            list_inline_btn.append(10)

        with con:
            con.execute(f"UPDATE Person SET problems='{' '.join([str(x) for x in list_inline_btn])}' WHERE id='{callback_query.from_user.id}';")

        await callback_query.message.edit_reply_markup(reply_markup=kb_my_prob)
    elif 6 <= code <= 10:
        await callback_query.message.edit_reply_markup(reply_markup=None)
        kb_my_prob = InlineKeyboardMarkup()
        for pr in range(len(list_inline_btn)):
            if code - 1 == list_inline_btn[pr]:
                list_inline_btn[pr] -= 5
        if list_inline_btn[0] < 5 and list_inline_btn[1] < 5 and list_inline_btn[2] < 5 and list_inline_btn[3] < 5 \
                and list_inline_btn[4] < 5:
            del list_inline_btn[-1]
        for pr in range(len(list_inline_btn)):
            kb_my_prob.add(list_prob_btn[list_inline_btn[pr]])

        with con:
            con.execute(f"UPDATE Person SET problems='{' '.join([str(x) for x in list_inline_btn])}' "
                        f"WHERE id='{callback_query.from_user.id}';")

        await callback_query.message.edit_reply_markup(reply_markup=kb_my_prob)
    elif code == 11:
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è(–ª–∞—Å—å) —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ ‚ù§',
                               reply_markup=None)
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('check_up.png'))
        await bot.send_media_group(callback_query.from_user.id, media=media)
        await bot.send_message(callback_query.from_user.id, '–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ '
                                                            '—Å–æ—Å—Ç–æ—è–Ω–∏–µ üéâ\n–î–ª—è —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é '
                                                            '–±—É–¥–µ—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é. –¢–∞–∫, —Ç—ã '
                                                            '—Å–º–æ–∂–µ—à—å –Ω–∞–≥–ª—è–¥–Ω–æ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å, –≤ –∫–∞–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —á–∞—â–µ –≤—Å–µ–≥–æ '
                                                            '–≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—Ç –∂–µ–ª–∞–Ω–∏–µ, —Å–º–æ–∂–µ—à—å '
                                                            '–ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥—É.\nP.S. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è '
                                                            '–ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ '
                                                            '–Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.', reply_markup=None)
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('example.png'), 'üìà –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–ª–µ–ª–∏')
        await bot.send_media_group(callback_query.from_user.id, media=media)

        with con:
            con.execute(f"UPDATE Person SET problems='{' '.join([str(x) for x in list_inline_btn[:-1]])}' "
                        f"WHERE id='{callback_query.from_user.id}';")

        await bot.send_message(callback_query.from_user.id, '–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=go_to_menu)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('con'))
async def process_check_up(callback_query: types.CallbackQuery):
    global st_condition
    global list_q
    await callback_query.message.delete()
    code = callback_query.data[3:]
    if code.isdigit():
        code = int(code)
    st_condition += str(code) + ' '
    if len(st_condition) < 12:
        await bot.send_message(callback_query.from_user.id, list_q[len(st_condition) // 2 - 1], reply_markup=kb_check)
    else:
        work_with_db.check_up(callback_query.from_user.id, st_condition)
        draw.create_graphs(callback_query.from_user.id)
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('check_up.png'))
        await bot.send_media_group(callback_query.from_user.id, media=media)
        media = types.MediaGroup()
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_mood.png"),
                           caption='üìà –ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:')
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_anxiety.png"))
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_procrastination.png"))
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_loneliness.png"))
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_doubt.png"))
        media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_condemning.png"))
        await bot.send_media_group(callback_query.from_user.id, media=media)
        await bot.send_message(callback_query.from_user.id,
                               '–° –∑–∞–±–æ—Ç–æ–π, —Ç–≤–æ–π connection ‚ù§Ô∏è', reply_markup=go_to_menu)
        draw.photo_del(callback_query.from_user.id)


# —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ —á–µ–∫-–∞–ø –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ—à–ª—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('chk'))
async def process_callback_check_up(callback_query: types.CallbackQuery):
    global con
    await callback_query.message.delete()
    code = callback_query.data[3:]
    if int(code) == 1:
        if work_with_db.if_check(callback_query.from_user.id):
            await bot.send_message(callback_query.from_user.id, '–ö–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?',
                                   reply_markup=kb_check)
        else:
            await bot.send_message(callback_query.from_user.id, '–í—ã —É–∂–µ –æ—Ç—Å–ª–µ–¥–∏–ª–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è ‚ù§Ô∏è',
                                   reply_markup=go_to_menu)
    else:
        cursor = con.cursor()
        sqlite_select_query = f"SELECT * from CheckUp where user_id='{callback_query.from_user.id}'"
        cursor.execute(sqlite_select_query)
        last_date = cursor.fetchall()
        print(last_date)
        if last_date:
            media = types.MediaGroup()
            draw.create_graphs(callback_query.from_user.id)
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_mood.png"),
                               caption='üìà –ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–≥–ª—è–¥—è—Ç —Ç–∞–∫:')
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_anxiety.png"))
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_procrastination.png"))
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_loneliness.png"))
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_doubt.png"))
            media.attach_photo(types.InputFile('files//' + str(callback_query.from_user.id) + "_condemning.png"))
            await bot.send_media_group(callback_query.from_user.id, media=media)
            await bot.send_message(callback_query.from_user.id,
                                   '–° –∑–∞–±–æ—Ç–æ–π, —Ç–≤–æ–π connection ‚ù§Ô∏è', reply_markup=go_to_menu)
            draw.photo_del(callback_query.from_user.id)
        else:
            await bot.send_message(callback_query.from_user.id, '–í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚ù§Ô∏è',
                                   reply_markup=go_to_menu)


# –ø–æ–∫–∞–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('all_psy'))
async def psycho(callback_query: types.CallbackQuery):
    global con

    await callback_query.message.delete()

    with con:
        list_psy = list(con.execute(f"SELECT * FROM Psychologist"))

    code = int(callback_query.data[7:])
    but = InlineKeyboardMarkup(row_width=3)

    but.add(InlineKeyboardButton('‚¨ÖÔ∏è', callback_data='all_psy' + str((code - 1) % len(list_psy))))
    but.add(InlineKeyboardButton('üë© –í—ã–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞', callback_data='psy_' + str(list_psy[code][0]) + '_' +
                                                                       str(code % len(list_psy))))
    but.add(InlineKeyboardButton('‚û°Ô∏è', callback_data='all_psy' + str((code + 1) % len(list_psy))))
    but.add(InlineKeyboardButton('‚û°Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    await callback_query.message.answer_photo(open('psy_photo//' + str(list_psy[code][0]) + '.jpg', "rb"),
                                              caption=(list_psy[code][1] + '\n' + list_psy[code][2] + '\n' +
                                                       list_psy[code][3] + '\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ' +
                                                       str(list_psy[code][5])),
                                              reply_markup=but)


# –ø–æ–∫–∞–∑ —Å–ª–æ—Ç–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('psy_'))
async def psycho(callback_query: types.CallbackQuery):
    global con

    await callback_query.message.delete()

    data = callback_query.data.split('_')
    psy_id = data[1]
    but = InlineKeyboardMarkup()
    if len(data) == 3:
        today = datetime.date.today()
        margin_a = datetime.timedelta(days=6 - datetime.datetime.today().weekday())
        margin_b = datetime.timedelta(days=1)
        list_of_date = []

        with con:
            data_list = list(con.execute(f"SELECT date, id FROM Slot Where psycho_id='{psy_id}' and is_free='1';"))

        for date in data_list:
            if today + margin_b <= datetime.date(int(date[0][:4]), int(date[0][5:7]), int(date[0][8:])) <= today + margin_a:
                if date[0][8:] + '.' + date[0][5:7] not in list_of_date:
                    but.add(InlineKeyboardButton('üìÖ ' + date[0][8:] + '.' + date[0][5:7],
                                                 callback_data='psy_' + psy_id + '_' + str(date[0]) + '_' + data[2]))
                    # –∞–π–¥–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                    list_of_date.append(date[0][8:] + '.' + date[0][5:7])
        but.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + data[2]))

        await bot.send_message(callback_query.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å –¥–µ–Ω—å ‚ù§Ô∏è',
                               reply_markup=but)
    else:
        date_of_slots = data[2]

        with con:
            time_list = list(con.execute(f"SELECT time, id FROM Slot WHERE psycho_id='{psy_id}' "
                                         f"and date='{date_of_slots}' and is_free='1';"))
        for time in time_list:
            slot_time = datetime.time.fromisoformat(time[0])
            now_time = datetime.time.fromisoformat(str(datetime.datetime.now().time().hour) + ':' +
                                                   str(datetime.datetime.now().time().minute))
            if now_time < slot_time:
                but.add(InlineKeyboardButton('‚è∞ ' + time[0], callback_data='reserve_slot_' + str(time[1])))
        but.add(InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º', callback_data='all_psy' + data[3]))

        await bot.send_message(callback_query.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è ‚ù§Ô∏è',
                               reply_markup=but)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(content_types=['photo'])
async def get_photo(message: types.Message):
    global con

    if str(message.from_user.id) == '596752948':

        with con:
            id = list(con.execute(f"SELECT id FROM Psychologist WHERE photo='–Ω–µ—Ç —Ñ–æ—Ç–æ';"))

        if id:
            await message.photo[-1].download(destination_file='psy_photo//' + str(id[0][0]) + '.jpg')

            with con:
                con.execute(f"UPDATE Psychologist SET photo='—Ñ–æ—Ç–æ' WHERE id='{id[0][0]}';")

            await bot.send_message(message.from_user.id, 'photo set', reply_markup=go_to_menu)
        else:
            await bot.send_message(message.from_user.id, '–ù–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –±–µ–∑ —Ñ–æ—Ç–æ', reply_markup=go_to_menu)
    else:
        await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', reply_markup=start_button)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler()
async def user_problems(message: types.Message):
    global con

    with con:
        psycho_list = [str(x[0]) for x in list(con.execute(f"SELECT id FROM Psychologist;"))]

    if message.text[:3] == 'add' and str(message.from_user.id) == '596752948':
        mass = message.text.split('/')
        sql1, data1 = 'INSERT INTO Psychologist (id, name, problems, about, photo, rating) values(?, ?, ?, ?, ?, ?)', []
        data1.append((mass[1], mass[2], mass[3], mass[4], '–Ω–µ—Ç —Ñ–æ—Ç–æ', 0))

        with con:
            con.executemany(sql1, data1)

        await bot.send_message(message.from_user.id, '10x', reply_markup=go_to_menu)
    elif message.text[:4] == 'slot' and str(message.from_user.id) in psycho_list:
        mass = message.text.split('/')
        sql1 = 'INSERT INTO Slot (id, psycho_id, date, time, is_free) values(?, ?, ?, ?, ?)'

        with con:
            count = int(list(con.execute(f"SELECT COUNT(*) FROM Slot"))[0][0])

        for x in range(1, len(mass)):
            dt = mass[x].split()
            data1 = [(count + x, int(message.from_user.id), dt[0], dt[1], 1)]

            with con:
                con.executemany(sql1, data1)

        await bot.send_message(message.from_user.id, '–í–∞—à–∏ —Å–ª–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=go_to_menu)
    elif message.text[:3] == 'all' and str(message.from_user.id) == '596752948':
        mass = message.text.split('/')

        with con:
            user_list = list(con.execute(f"SELECT id FROM Person"))

        for user in user_list:
            await bot.send_message(user[0], mass[1])
    else:
        await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                               reply_markup=start_button)


'''–ê–î–ú–ò–ù–°–ö–ê–Ø –ß–ê–°–¢–¨'''
time_for_checkup = dict()

'''–û–ë–©–ê–Ø –ß–ê–°–¢–¨'''
executor.start_polling(dp, skip_updates=True)

# –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è —á–µ–∫-–∞–ø–∞

# elif message.text[0:2].isdigit() and message.text[3:].isdigit() and int(message.text[0:2]) <= 23 and \
# message.text[2] == ':' and int(message.text[3:]) <= 59 and len(message.text) == 5:
#     print(11111)
#     time_for_checkup[message.from_user.id] = message.text
# —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤–æ–æ–±—â–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–æ —è –ø–æ–∫–∞ —ç—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é)
#     work_with_db.add_new_person(message.from_user.id, ' '.join([str(x) for x in list_inline_btn[:-1]]))
#     print(message.text, message.from_user.id)
#     await bot.send_message(message.from_user.id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ '
#                                                  f'{time_for_checkup[message.from_user.id]}, —á—Ç–æ–±—ã —Ç—ã –Ω–µ –∑–∞–±—ã–≤–∞–ª(–∞)'
#                                                  f' –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚ù§Ô∏è',
#                            reply_markup=None)
#   await bot.send_message(message.from_user.id, '–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=go_to_menu)


# –Ω–µ —Ä–∞–±–æ—Ç–∞—é—â–∞—è —à—Ç—É–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# @dp.message_handler()
# async def send_message(user_id):
#     await bot.send_message(user_id, "–•–µ–πüññ –Ω–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è!", reply_markup=go_to_menu)
#
#
# async def scheduler(time, user_id):
#     aioschedule.every().day.at(time).do(send_message(user_id))
#     print(1)
#     while True:
#         await aioschedule.run_pending()
#         await asyncio.sleep(1)


# async def on_startup(dp):
#     asyncio.create_task(scheduler())
